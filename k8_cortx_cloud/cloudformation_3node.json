{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for CORTX on Kubernetes. See https://github.com/Seagate/cortx-k8s/blob/main/doc/cortx-aws-k8s-installation.md for details.",
  "Mappings": {
    "RegionMap": {
      "af-south-1": {
        "AMI": "ami-0b761332115c38669"
      },
      "ap-east-1": {
        "AMI": "ami-09611bd6fa5dd0e3d"
      },
      "ap-northeast-1": {
        "AMI": "ami-0ddea5e0f69c193a4"
      },
      "ap-northeast-2": {
        "AMI": "ami-0e4214f08b51e23cc"
      },
      "ap-south-1": {
        "AMI": "ami-0ffc7af9c06de0077"
      },
      "ap-southeast-1": {
        "AMI": "ami-0adfdaea54d40922b"
      },
      "ap-southeast-2": {
        "AMI": "ami-03d56f451ca110e99"
      },
      "ca-central-1": {
        "AMI": "ami-0a7c5b189b6460115"
      },
      "eu-central-1": {
        "AMI": "ami-08b6d44b4f6f7b279"
      },
      "eu-north-1": {
        "AMI": "ami-0358414bac2039369"
      },
      "eu-south-1": {
        "AMI": "ami-0fe3899b62205176a"
      },
      "eu-west-1": {
        "AMI": "ami-04f5641b0d178a27a"
      },
      "eu-west-2": {
        "AMI": "ami-0b22fcaf3564fb0c9"
      },
      "eu-west-3": {
        "AMI": "ami-072ec828dae86abe5"
      },
      "me-south-1": {
        "AMI": "ami-0ac17dcdd6f6f4eb6"
      },
      "sa-east-1": {
        "AMI": "ami-02334c45dd95ca1fc"
      },
      "us-east-1": {
        "AMI": "ami-00e87074e52e6c9f9"
      },
      "us-east-2": {
        "AMI": "ami-00f8e2c955f7ffa9b"
      },
      "us-west-1": {
        "AMI": "ami-08d2d8b00f270d03b"
      },
      "us-west-2": {
        "AMI": "ami-0686851c4e7b1a8e1"
      }
    }
  },
  "Outputs": {
    "ClusterControlPlane": {
      "Description": "IP of the k8s control plane node",
      "Value": {
        "Fn::GetAtt": [
          "ControlPlaneENI",
          "PrimaryPrivateIpAddress"
        ]
      }
    }
  },
  "Parameters": {
    "DiskSizeApplication": {
      "Default": "25",
      "Description": "Size of disk in GiB for 3rd party applications required for normal CORTX installation. This disk is used also to store various CORTX logs -- for a long-running clusters under heavy load we recommend at least 50GB of capacity for this disk",
      "Type": "Number"
    },
    "DiskSizeLog": {
      "Default": "25",
      "Description": "Size of disk in GiB for internal logs. (Not used)",
      "Type": "Number"
    },
    "DiskSizeMotr": {
      "Default": "25",
      "Description": "Size of Motr data and metadata disks in GiB.",
      "Type": "Number"
    },
    "DiskSizeOS": {
      "Default": "50",
      "Description": "Size of OS disk in GiB.",
      "Type": "Number"
    },
    "DurabilityDIX": {
      "Default": "1+0+0",
      "Description": "Durability for metadata, of the form N+K+S.",
      "Type": "String"
    },
    "DurabilitySNS": {
      "Default": "1+0+0",
      "Description": "Durability for data, of the form N+K+S.",
      "Type": "String"
    },
    "ImageBusybox": {
      "Default": "ghcr.io/seagate/busybox:latest",
      "Type": "String"
    },
    "ImageCORTXClient": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXControl": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXControlProv": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXData": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXDataProv": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXHA": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageCORTXServer": {
      "Default": "ghcr.io/seagate/cortx-all:2.0.0-642-custom-ci",
      "Type": "String"
    },
    "ImageConsul": {
      "Default": "ghcr.io/seagate/consul:1.10.0",
      "Type": "String"
    },
    "ImageKafka": {
      "Default": "ghcr.io/seagate/kafka:3.0.0-debian-10-r7",
      "Type": "String"
    },
    "ImageOpenLDAP": {
      "Default": "ghcr.io/seagate/symas-openldap:2.4.58",
      "Type": "String"
    },
    "ImageRancher": {
      "Default": "ghcr.io/seagate/local-path-provisioner:v0.0.20",
      "Type": "String"
    },
    "ImageZookeeper": {
      "Default": "ghcr.io/seagate/zookeeper:3.7.0-debian-10-r182",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type. c5.2xlarge is sufficient for 3 node clusters.",
      "Default": "c5.2xlarge",
      "Description": "EC2 instance type.",
      "Type": "String"
    },
    "KeyPair": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the nodes.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "KubernetesToken": {
      "AllowedPattern": "[a-z0-9]{6}\\.[a-z0-9]{16}",
      "Default": "abcdef.1234567890abcdef",
      "Description": "Token to use to bootstrap the Kubernetes cluster. Can be generated in advance by running `kubeadm token generate` on your local machine.",
      "Type": "String"
    },
    "SecurityGroup": {
      "Description": "Name of an existing security group with SSH (tcp/22) access from the bastion subnet.",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "SetupSize": {
      "AllowedValues": [
        "small",
        "large"
      ],
      "Default": "small",
      "Description": "Resource utilization to configure. \"large\" aggressively allocates memory, and requires larger amounts of RAM on nodes.",
      "Type": "String"
    },
    "Subnet": {
      "Description": "Name of an existing subnet for the cluster.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "VersionDeploymentRepo": {
      "Default": "v0.0.22",
      "Description": "Version of cortx-k8s repo to build from. Can be either a branch or tagged release.",
      "Type": "String"
    }
  },
  "Resources": {
    "ControlPlane": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "NodeTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "NodeTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "ControlPlaneENI"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "set -xeuo pipefail",
                "exec >/tmp/install.log 2>&1",
                "env",
                "cd /root",
                "yum update -y",
                "yum install -y yum-utils git wget nvme-cli python3",
                "wget --no-verbose https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz",
                "tar -xf aws-cfn-bootstrap-py3-latest.tar.gz",
                "(cd aws-cfn-bootstrap-2.0/ && python3 setup.py install)",
                "DEPLOY_SUCCESS=false",
                "function signal_cloudformation() {",
                {
                  "Fn::Sub": "/usr/local/bin/cfn-signal --stack ${AWS::StackName} --resource ControlPlane --region ${AWS::Region} --success $DEPLOY_SUCCESS"
                },
                "}",
                "trap signal_cloudformation EXIT",
                "wget --no-verbose https://github.com/mikefarah/yq/releases/download/v4.19.1/yq_linux_amd64 -O /usr/bin/yq",
                "chmod +x /usr/bin/yq",
                "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo",
                "yum install -y docker-ce docker-ce-cli containerd.io",
                "systemctl start docker",
                "systemctl enable docker",
                "usermod -aG docker centos",
                "cat <<EOF | tee /etc/modules-load.d/k8s.conf",
                "br_netfilter",
                "EOF",
                "cat <<EOF | tee /etc/sysctl.d/k8s.conf",
                "net.bridge.bridge-nf-call-ip6tables = 1",
                "net.bridge.bridge-nf-call-iptables = 1",
                "EOF",
                "sysctl --system",
                "cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo",
                "[kubernetes]",
                "name=Kubernetes",
                "baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch",
                "enabled=1",
                "gpgcheck=1",
                "repo_gpgcheck=1",
                "gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
                "exclude=kubelet kubeadm kubectl",
                "EOF",
                "setenforce 0",
                "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config",
                "yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes",
                "systemctl enable --now kubelet",
                "cat <<EOF | tee /etc/udev/rules.d/99-ebs-names.rules",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*\", ENV{DEVTYPE}==\"disk\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c\"",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*p[0-9]*\", ENV{DEVTYPE}==\"partition\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c%n\"",
                "EOF",
                "udevadm control --reload-rules",
                "udevadm trigger -c add -s block",
                {
                  "Fn::Sub": "NODE_IP=${Worker0ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${Worker1ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${ControlPlaneENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                "cat <<EOF | tee devices.txt",
                "/dev/sdd",
                "/dev/sde",
                "/dev/sdf",
                "/dev/sdg",
                "/dev/sdh",
                "/dev/sdi",
                "EOF",
                "cat <<EOF | tee kubeadm-config.yaml",
                "kind: ClusterConfiguration",
                "apiVersion: kubeadm.k8s.io/v1beta3",
                "kubernetesVersion: v1.23.0",
                "networking:",
                "  podSubnet: 192.168.0.0/16",
                "---",
                "kind: KubeletConfiguration",
                "apiVersion: kubelet.config.k8s.io/v1beta1",
                "cgroupDriver: cgroupfs",
                "---",
                "apiVersion: kubeadm.k8s.io/v1beta3",
                "kind: InitConfiguration",
                "bootstrapTokens:",
                {
                  "Fn::Sub": "- token: \"${KubernetesToken}\""
                },
                "EOF",
                "kubeadm init --config kubeadm-config.yaml",
                "export KUBECONFIG=/etc/kubernetes/admin.conf",
                "mkdir -p /root/.kube",
                "cp /etc/kubernetes/admin.conf /root/.kube/config",
                "mkdir -p ~centos/.kube",
                "cp /etc/kubernetes/admin.conf ~centos/.kube/config",
                "chown -R $(id -u centos):$(id -g centos) ~centos/.kube",
                "sudo -u centos kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml",
                "sudo -u centos kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml",
                "sudo -u centos kubectl taint nodes --all node-role.kubernetes.io/master-",
                {
                  "Fn::Sub": "git clone -b ${VersionDeploymentRepo} https://github.com/Seagate/cortx-k8s.git"
                },
                "mv ./cortx-k8s/k8_cortx_cloud/solution.yaml ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig",
                {
                  "Fn::Sub": "./cortx-k8s/k8_cortx_cloud/generate-cvg-yaml.sh --nodes nodes.txt --devices devices.txt --cvgs 2 --data 2 --solution ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig  --datasize ${DiskSizeMotr}Gi --metadatasize ${DiskSizeMotr}Gi > ./cortx-k8s/k8_cortx_cloud/solution.yaml"
                },
                "(cd cortx-k8s/k8_cortx_cloud/ && ./prereq-deploy-cortx-cloud.sh /dev/sdb)",
                "yq -i '",
                {
                  "Fn::Sub": "  .solution.common.setup_size = \"${SetupSize}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.sns = \"${DurabilitySNS}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.dix = \"${DurabilityDIX}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrolprov = \"${ImageCORTXControlProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrol = \"${ImageCORTXControl}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdataprov = \"${ImageCORTXDataProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdata = \"${ImageCORTXData}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxserver = \"${ImageCORTXServer}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxha = \"${ImageCORTXHA}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxclient = \"${ImageCORTXClient}\""
                },
                {
                  "Fn::Sub": "| .solution.images.openldap = \"${ImageOpenLDAP}\""
                },
                {
                  "Fn::Sub": "| .solution.images.consul = \"${ImageConsul}\""
                },
                {
                  "Fn::Sub": "| .solution.images.kafka = \"${ImageKafka}\""
                },
                {
                  "Fn::Sub": "| .solution.images.zookeeper = \"${ImageZookeeper}\""
                },
                {
                  "Fn::Sub": "| .solution.images.rancher = \"${ImageRancher}\""
                },
                {
                  "Fn::Sub": "| .solution.images.busybox = \"${ImageBusybox}\""
                },
                "' cortx-k8s/k8_cortx_cloud/solution.yaml",
                "cat cortx-k8s/k8_cortx_cloud/solution.yaml",
                "for n in $(cat nodes.txt); do while ! kubectl wait --for=condition=Ready \"node/$n\"; do sleep 5; done; done",
                "(cd cortx-k8s/k8_cortx_cloud/ && ./deploy-cortx-cloud.sh)",
                "DEPLOY_SUCCESS=true"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "ControlPlaneENI": {
      "Properties": {
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Subnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "NodeTemplate": {
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeOS"
                }
              }
            },
            {
              "DeviceName": "/dev/sdb",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeApplication"
                }
              }
            },
            {
              "DeviceName": "/dev/sdc",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeLog"
                }
              }
            },
            {
              "DeviceName": "/dev/sdd",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            },
            {
              "DeviceName": "/dev/sde",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            },
            {
              "DeviceName": "/dev/sdf",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            },
            {
              "DeviceName": "/dev/sdg",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            },
            {
              "DeviceName": "/dev/sdh",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            },
            {
              "DeviceName": "/dev/sdi",
              "Ebs": {
                "DeleteOnTermination": true,
                "VolumeSize": {
                  "Ref": "DiskSizeMotr"
                }
              }
            }
          ],
          "ImageId": {
            "Fn::FindInMap": [
              "RegionMap",
              {
                "Ref": "AWS::Region"
              },
              "AMI"
            ]
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "KeyName": {
            "Ref": "KeyPair"
          }
        }
      },
      "Type": "AWS::EC2::LaunchTemplate"
    },
    "Worker0": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "NodeTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "NodeTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "Worker0ENI"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "set -xeuo pipefail",
                "exec >/tmp/install.log 2>&1",
                "env",
                "cd /root",
                "yum update -y",
                "yum install -y yum-utils git wget nvme-cli python3",
                "wget --no-verbose https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz",
                "tar -xf aws-cfn-bootstrap-py3-latest.tar.gz",
                "(cd aws-cfn-bootstrap-2.0/ && python3 setup.py install)",
                "DEPLOY_SUCCESS=false",
                "function signal_cloudformation() {",
                {
                  "Fn::Sub": "/usr/local/bin/cfn-signal --stack ${AWS::StackName} --resource Worker0 --region ${AWS::Region} --success $DEPLOY_SUCCESS"
                },
                "}",
                "trap signal_cloudformation EXIT",
                "wget --no-verbose https://github.com/mikefarah/yq/releases/download/v4.19.1/yq_linux_amd64 -O /usr/bin/yq",
                "chmod +x /usr/bin/yq",
                "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo",
                "yum install -y docker-ce docker-ce-cli containerd.io",
                "systemctl start docker",
                "systemctl enable docker",
                "usermod -aG docker centos",
                "cat <<EOF | tee /etc/modules-load.d/k8s.conf",
                "br_netfilter",
                "EOF",
                "cat <<EOF | tee /etc/sysctl.d/k8s.conf",
                "net.bridge.bridge-nf-call-ip6tables = 1",
                "net.bridge.bridge-nf-call-iptables = 1",
                "EOF",
                "sysctl --system",
                "cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo",
                "[kubernetes]",
                "name=Kubernetes",
                "baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch",
                "enabled=1",
                "gpgcheck=1",
                "repo_gpgcheck=1",
                "gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
                "exclude=kubelet kubeadm kubectl",
                "EOF",
                "setenforce 0",
                "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config",
                "yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes",
                "systemctl enable --now kubelet",
                "cat <<EOF | tee /etc/udev/rules.d/99-ebs-names.rules",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*\", ENV{DEVTYPE}==\"disk\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c\"",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*p[0-9]*\", ENV{DEVTYPE}==\"partition\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c%n\"",
                "EOF",
                "udevadm control --reload-rules",
                "udevadm trigger -c add -s block",
                {
                  "Fn::Sub": "NODE_IP=${Worker0ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${Worker1ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${ControlPlaneENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                "cat <<EOF | tee devices.txt",
                "/dev/sdd",
                "/dev/sde",
                "/dev/sdf",
                "/dev/sdg",
                "/dev/sdh",
                "/dev/sdi",
                "EOF",
                {
                  "Fn::Sub": "kubeadm join ${ControlPlaneENI.PrimaryPrivateIpAddress}:6443 --token ${KubernetesToken} --discovery-token-unsafe-skip-ca-verification"
                },
                {
                  "Fn::Sub": "git clone -b ${VersionDeploymentRepo} https://github.com/Seagate/cortx-k8s.git"
                },
                "mv ./cortx-k8s/k8_cortx_cloud/solution.yaml ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig",
                {
                  "Fn::Sub": "./cortx-k8s/k8_cortx_cloud/generate-cvg-yaml.sh --nodes nodes.txt --devices devices.txt --cvgs 2 --data 2 --solution ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig  --datasize ${DiskSizeMotr}Gi --metadatasize ${DiskSizeMotr}Gi > ./cortx-k8s/k8_cortx_cloud/solution.yaml"
                },
                "(cd cortx-k8s/k8_cortx_cloud/ && ./prereq-deploy-cortx-cloud.sh /dev/sdb)",
                "yq -i '",
                {
                  "Fn::Sub": "  .solution.common.setup_size = \"${SetupSize}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.sns = \"${DurabilitySNS}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.dix = \"${DurabilityDIX}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrolprov = \"${ImageCORTXControlProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrol = \"${ImageCORTXControl}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdataprov = \"${ImageCORTXDataProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdata = \"${ImageCORTXData}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxserver = \"${ImageCORTXServer}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxha = \"${ImageCORTXHA}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxclient = \"${ImageCORTXClient}\""
                },
                {
                  "Fn::Sub": "| .solution.images.openldap = \"${ImageOpenLDAP}\""
                },
                {
                  "Fn::Sub": "| .solution.images.consul = \"${ImageConsul}\""
                },
                {
                  "Fn::Sub": "| .solution.images.kafka = \"${ImageKafka}\""
                },
                {
                  "Fn::Sub": "| .solution.images.zookeeper = \"${ImageZookeeper}\""
                },
                {
                  "Fn::Sub": "| .solution.images.rancher = \"${ImageRancher}\""
                },
                {
                  "Fn::Sub": "| .solution.images.busybox = \"${ImageBusybox}\""
                },
                "' cortx-k8s/k8_cortx_cloud/solution.yaml",
                "cat cortx-k8s/k8_cortx_cloud/solution.yaml",
                "DEPLOY_SUCCESS=true"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "Worker0ENI": {
      "Properties": {
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Subnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Worker1": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Properties": {
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "NodeTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "NodeTemplate",
              "LatestVersionNumber"
            ]
          }
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "Worker1ENI"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "set -xeuo pipefail",
                "exec >/tmp/install.log 2>&1",
                "env",
                "cd /root",
                "yum update -y",
                "yum install -y yum-utils git wget nvme-cli python3",
                "wget --no-verbose https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz",
                "tar -xf aws-cfn-bootstrap-py3-latest.tar.gz",
                "(cd aws-cfn-bootstrap-2.0/ && python3 setup.py install)",
                "DEPLOY_SUCCESS=false",
                "function signal_cloudformation() {",
                {
                  "Fn::Sub": "/usr/local/bin/cfn-signal --stack ${AWS::StackName} --resource Worker1 --region ${AWS::Region} --success $DEPLOY_SUCCESS"
                },
                "}",
                "trap signal_cloudformation EXIT",
                "wget --no-verbose https://github.com/mikefarah/yq/releases/download/v4.19.1/yq_linux_amd64 -O /usr/bin/yq",
                "chmod +x /usr/bin/yq",
                "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo",
                "yum install -y docker-ce docker-ce-cli containerd.io",
                "systemctl start docker",
                "systemctl enable docker",
                "usermod -aG docker centos",
                "cat <<EOF | tee /etc/modules-load.d/k8s.conf",
                "br_netfilter",
                "EOF",
                "cat <<EOF | tee /etc/sysctl.d/k8s.conf",
                "net.bridge.bridge-nf-call-ip6tables = 1",
                "net.bridge.bridge-nf-call-iptables = 1",
                "EOF",
                "sysctl --system",
                "cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo",
                "[kubernetes]",
                "name=Kubernetes",
                "baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch",
                "enabled=1",
                "gpgcheck=1",
                "repo_gpgcheck=1",
                "gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg",
                "exclude=kubelet kubeadm kubectl",
                "EOF",
                "setenforce 0",
                "sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config",
                "yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes",
                "systemctl enable --now kubelet",
                "cat <<EOF | tee /etc/udev/rules.d/99-ebs-names.rules",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*\", ENV{DEVTYPE}==\"disk\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c\"",
                "ACTION==\"add\", KERNEL==\"nvme[0-9]*n[0-9]*p[0-9]*\", ENV{DEVTYPE}==\"partition\", ATTRS{model}==\"Amazon Elastic Block Store\", PROGRAM=\"/bin/sh -c 'set -eo pipefail; /sbin/nvme id-ctrl -b /dev/%k | cut -b 3073-3075'\", SYMLINK+=\"%c%n\"",
                "EOF",
                "udevadm control --reload-rules",
                "udevadm trigger -c add -s block",
                {
                  "Fn::Sub": "NODE_IP=${Worker0ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${Worker1ENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                {
                  "Fn::Sub": "NODE_IP=${ControlPlaneENI.PrimaryPrivateIpAddress}"
                },
                "SHORT_NAME=ip-$(echo \"$NODE_IP\" | sed 's/\\./-/g')",
                "NODE_NAME=$SHORT_NAME.ec2.internal",
                "echo \"$NODE_NAME\" >> nodes.txt",
                "echo \"$NODE_IP\" \"$NODE_NAME\" \"$SHORT_NAME\" >> /etc/hosts",
                "cat <<EOF | tee devices.txt",
                "/dev/sdd",
                "/dev/sde",
                "/dev/sdf",
                "/dev/sdg",
                "/dev/sdh",
                "/dev/sdi",
                "EOF",
                {
                  "Fn::Sub": "kubeadm join ${ControlPlaneENI.PrimaryPrivateIpAddress}:6443 --token ${KubernetesToken} --discovery-token-unsafe-skip-ca-verification"
                },
                {
                  "Fn::Sub": "git clone -b ${VersionDeploymentRepo} https://github.com/Seagate/cortx-k8s.git"
                },
                "mv ./cortx-k8s/k8_cortx_cloud/solution.yaml ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig",
                {
                  "Fn::Sub": "./cortx-k8s/k8_cortx_cloud/generate-cvg-yaml.sh --nodes nodes.txt --devices devices.txt --cvgs 2 --data 2 --solution ./cortx-k8s/k8_cortx_cloud/solution.yaml.orig  --datasize ${DiskSizeMotr}Gi --metadatasize ${DiskSizeMotr}Gi > ./cortx-k8s/k8_cortx_cloud/solution.yaml"
                },
                "(cd cortx-k8s/k8_cortx_cloud/ && ./prereq-deploy-cortx-cloud.sh /dev/sdb)",
                "yq -i '",
                {
                  "Fn::Sub": "  .solution.common.setup_size = \"${SetupSize}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.sns = \"${DurabilitySNS}\""
                },
                {
                  "Fn::Sub": "| .solution.common.storage_sets.durability.dix = \"${DurabilityDIX}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrolprov = \"${ImageCORTXControlProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxcontrol = \"${ImageCORTXControl}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdataprov = \"${ImageCORTXDataProv}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxdata = \"${ImageCORTXData}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxserver = \"${ImageCORTXServer}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxha = \"${ImageCORTXHA}\""
                },
                {
                  "Fn::Sub": "| .solution.images.cortxclient = \"${ImageCORTXClient}\""
                },
                {
                  "Fn::Sub": "| .solution.images.openldap = \"${ImageOpenLDAP}\""
                },
                {
                  "Fn::Sub": "| .solution.images.consul = \"${ImageConsul}\""
                },
                {
                  "Fn::Sub": "| .solution.images.kafka = \"${ImageKafka}\""
                },
                {
                  "Fn::Sub": "| .solution.images.zookeeper = \"${ImageZookeeper}\""
                },
                {
                  "Fn::Sub": "| .solution.images.rancher = \"${ImageRancher}\""
                },
                {
                  "Fn::Sub": "| .solution.images.busybox = \"${ImageBusybox}\""
                },
                "' cortx-k8s/k8_cortx_cloud/solution.yaml",
                "cat cortx-k8s/k8_cortx_cloud/solution.yaml",
                "DEPLOY_SUCCESS=true"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "Worker1ENI": {
      "Properties": {
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Subnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    }
  }
}
