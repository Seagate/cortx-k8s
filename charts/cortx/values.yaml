# Default values for cortx.
# This is a YAML-formatted file.

# -- A name that will partially override cortx.fullname
nameOverride: ""

# -- A name that will fully override cortx.fullname
fullnameOverride: ""

# -- Kubernetes Cluster Domain
clusterDomain: cluster.local

serviceAccount:
  # -- Enable the creation of a ServiceAccount for CORTX pods
  create: true
  # -- The name of the service account to use.
  # If not set and `create` is true, a name is generated using the fullname template
  name: ""
  # -- Custom annotations for the CORTX ServiceAccount
  annotations: {}
  # -- Allow auto mounting of the service account token
  automountServiceAccountToken: false

rbac:
  # -- Enable the creation of RBAC resources, Role and RoleBinding, for the CORTX ServiceAccount.
  create: true

# Consul chart configuration
# ref: https://github.com/hashicorp/consul-k8s/blob/main/charts/consul/values.yaml
consul:
  # -- Enable installation of the Consul chart
  enabled: true
  ui:
    # -- Enable the Consul UI
    enabled: false
  server:
    containerSecurityContext:
      server:
        # -- Allow extra privileges in Consul server agent containers
        allowPrivilegeEscalation: false
  client:
    containerSecurityContext:
      client:
        # -- Allow extra privileges in Consul client agent containers
        allowPrivilegeEscalation: false

# externalConsul allows configuring an external Consul service
externalConsul:
  endpoints: []
  adminUser: admin
  adminSecretName: consul_admin_secret

# Kafka chart configuration
# ref: https://github.com/bitnami/charts/blob/master/bitnami/kafka/values.yaml
kafka:
  # -- Enable installation of the Kafka chart
  enabled: true
  serviceAccount:
    # -- Enable the creation of a ServiceAccount for Kafka pods
    create: true
    # -- Allow auto mounting of the service account token
    automountServiceAccountToken: false
  containerSecurityContext:
    # -- Allow extra privileges in Kafka containers
    allowPrivilegeEscalation: false
  # -- Enable topic deletion
  deleteTopicEnable: true
  # -- Overridden min.insync.replicas config for the transaction topic
  transactionStateLogMinIsr: 2
  # -- Extend timeout for successful Zookeeper connection
  zookeeperConnectionTimeoutMs: 60000
  startupProbe:
    # -- Enable startup probe to allow for slow Zookeeper startup
    enabled: true
    # -- Initial delay for startup probe
    initialDelaySeconds: 10

  # ZooKeeper chart configuration
  # ref: https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
  zookeeper:
    # -- Enable installation of the Zookeeper chart
    enabled: true
    serviceAccount:
      # -- Enable the creation of a ServiceAccount for Zookeeper pods
      create: true
      # -- Allow auto mounting of the service account token
      automountServiceAccountToken: false
    containerSecurityContext:
      # -- Allow extra privileges in Zookeeper containers
      allowPrivilegeEscalation: false

# externalKafka allows configuring an external Kafka service
externalKafka:
  endpoints: []
  adminUser: admin
  adminSecretName: kafka_admin_secret

# -- The name of the CORTX cluster.
# @default -- Chart Release fullname
clusterName: ""

# -- The unique ID of the CORTX cluster.
# @default -- A random UUID (v4)
clusterId: ""

# -- The name of an existing Secret that contains CORTX configuration secrets. Required or the Chart installation will fail.
existingSecret: ""

# CORTX Hare component configuration
hare:
  hax:
    ports:
      http:
        # -- The port number of the Hax HTTP endpoint.
        port: 22003
        # -- The protocol to configure the Hax HTTP endpoint as. Valid values are `http` or `https`.
        protocol: https
    resources:
      # -- Configure the resource limits for Hax containers. This applies to all Pods that run Hax containers.
      limits:
        cpu: 1000m
        memory: 2Gi
      # -- Configure the requested resources for all Hax containers. This applies to all Pods that run Hax containers.
      requests:
        cpu: 250m
        memory: 128Mi

### TODO Update this structure similar to solution.yaml, merge with appropriate .cortxdata elements, and convert to a list.
# storageSets is a Dictionary of storage sets.
# e.g.:
# storageSets:
#   storage-set-1:
#     durability:
#       sns: 1+0+0
#       dix: 1+0+0
#     controlUuid: "bfcb40c12e9f4fa4b924a787886a40b6"
#     haUuid: "0789bc5f5f544197a5c204ed5d68ab07"
#     nodes:
#       ssc-vm-g4-rhev4-0009.colo.seagate.com:
#         serverUuid: 50b3871d48fa4032bf27a211b4088df7
#         dataUuid: "8466d0079fd44cd38164d8e31f5cd067"
#         clientUuid: "6900a455cb634acea727cb01a7ac8e0a"
#       ssc-vm-g4-rhev4-0010.colo.seagate.com:
#         serverUuid: "05ceb17b5cdf47538db1bb89ccc247d2"
#         dataUuid: "eb79cc372c7443cbac768db4313cc0e8"
#         clientUuid: "6900a455cb634acea727cb01a7ac8e0a"
# UUIDs are optional and if omitted, will be randomly generated, with
# the exception of client UUIDs, which will not be configured if omitted.
storageSets: {}

# Deploy CORTX Control instance
# Control provides APIs to manage the CORTX cluster
control:
  # -- Enable installation of Control instances
  enabled: true

  # Control image
  # ref: https://github.com/Seagate/cortx/pkgs/container/cortx-control
  image:
    # -- Control image registry
    registry: ghcr.io
    # -- Control image name
    repository: seagate/cortx-control
    # -- Control image tag
    # @default -- Chart.AppVersion
    tag: ""
    # -- Control image pull policy
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    pullPolicy: IfNotPresent

  # Control Agent settings
  agent:
    # Control Agent resource requests and limits
    # ref: https://kubernetes.io/docs/user-guide/compute-resources/
    # These values specify the CORTX resource minimum requirements and limits.
    # The values apply to both container resources and the CORTX internal configuration.
    resources:
      # -- The resource limits for the Control Agent containers and processes
      limits:
        cpu: 500m
        memory: 256Mi
      # -- The resource requests for the Control Agent containers and processes
      requests:
        cpu: 250m
        memory: 128Mi

  # Control API service
  service:
    # -- Kubernetes service type
    type: ClusterIP
    ports:
      # -- Control API service HTTPS port
      https: 8081
    nodePorts:
      # -- Node port for HTTPS for LoadBalancer and NodePort service types
      https: ""

  # Persistence settings
  persistence:
    # -- Persistent volume size
    size: 1Gi

##
## Imported values from cortx-ha Helm Chart. These will be changed.
##
cortxha:
  enabled: true
  image: ghcr.io/seagate/centos:7
  fault_tolerance:
    resources:
      requests:
        memory: 128Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
  health_monitor:
    resources:
      requests:
        memory: 128Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
  k8s_monitor:
    resources:
      requests:
        memory: 128Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
  localpathpvc:
    requeststoragesize: 1Gi

# Deploy CORTX Server instances
# Server provides S3 storage
server:
  # -- Enable installation of Server instances
  enabled: true
  # -- Number of Server replicas
  replicaCount: 1

  # Server image
  # ref: https://github.com/Seagate/cortx/pkgs/container/cortx-rgw
  image:
    # -- Server image registry
    registry: ghcr.io
    # -- Server image name
    repository: seagate/cortx-rgw
    # -- Server image tag
    # @default -- Chart.AppVersion
    tag: ""
    # -- Server image pull policy
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    pullPolicy: IfNotPresent

  # Server RGW settings
  rgw:
    # Server RGW resource requests and limits
    # ref: https://kubernetes.io/docs/user-guide/compute-resources/
    # These values specify the CORTX resource minimum requirements and limits.
    # The values apply to both container resources and the CORTX internal configuration.
    resources:
      # -- The resource limits for the Server RGW containers and processes
      limits:
        cpu: 2000m
        memory: 2Gi
      # -- The resource requests for the Server RGW containers and processes
      requests:
        cpu: 250m
        memory: 128Mi

  # Server S3 service
  service:
    # -- Kubernetes service type
    type: ClusterIP
    # -- Number of service instances for LoadBalancer service types
    instanceCount: 1
    ports:
      # -- RGW S3 service HTTP port
      http: 80
      # -- RGW S3 service HTTPS port
      https: 443
    nodePorts:
      # -- Node port for S3 HTTP for LoadBalancer and NodePort service types
      http: ""
      # -- Node port for S3 HTTPS for LoadBalancer and NodePort service types
      https: ""

  # Persistence settings
  persistence:
    # -- Persistent volume size
    size: 1Gi
    # -- Persistent volume access modes
    accessModes:
      - ReadWriteOnce

  auth:
    # -- Name of the admin user to create when initializing the cluster
    adminUser: cortx-admin
    # -- Access Key of the admin user
    adminAccessKey: cortx-user

  # TODO: can this be removed?
  maxStartTimeout: 240

  # -- An optional multi-line string that contains extra RGW configuration settings.
  # The string may contain template expressions, and is appended to the end of the
  # computed configuration.
  ## e.g.:
  ## extraConfiguration: |
  ##   thread_pool_size: 10
  ##   gc_max_objs: 32
  ##   motr_max_rpc_msg_size: 524288
  extraConfiguration: ""

##
## Imported values from cortx-data Helm Chart. These will be changed.
##
cortxdata:
  image: ghcr.io/seagate/centos:7
  replicas: 3
  # nodes is an array of Kubernetes worker node names on which CORTX will be deployed.
  # NOTE: This parameter will eventually merge with .storageSets in some form.
  nodes: []
  # cvgs is an array of container volume groups (CVG).
  # A CVG contains a name, type, an optional array of metadata devices, and
  # an array of data devices.
  # NOTE: This parameter will eventually merge with .storageSets in some form.
  # e.g:
  # cvgs:
  # - name: cvg-01
  #   type: ios
  #   metadataDevices:
  #     - /dev/sdc
  #   dataDevices:
  #     - /dev/sdd
  #     - /dev/sde
  #     - /dev/sdf
  cvgs: []
  storageClassName: local-block-storage
  persistentStorage:
    volumeMode: Block
    accessModes:
    - ReadWriteMany
  motr:
    # -- The number of Motr IO containers per CORTX Data Pod.
    # As the number of CVGs increase, this value can be increased to reduce the number of total CORTX Data Pods per Kubernetes Worker Node.
    containerGroupSize: 1
    # An optional multi-line string that contains extra Motr configuration
    # settings. The string may contain template expressions, and is appended to
    # the end of the computed configuration.
    # e.g.:
    # extraConfiguration: |
    #   md_size: 10
    #   group_size: 1
    extraConfiguration: ""
    resources:
      requests:
        memory: 1Gi
        cpu: 250m
      limits:
        memory: 2Gi
        cpu: 1000m
  confd:
    resources:
      requests:
        memory: 128Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m
  localpathpvc:
    requeststoragesize: 1Gi
    accessmodes:
      - ReadWriteOnce

# Deploy CORTX Motr Client instances
# Motr Clients are generally a developer tool used for testing purposes
client:
  # -- Enable installation of Client instances
  enabled: false
  # -- Number of Client replicas
  replicaCount: 1
  # -- Number of Client instances (containers) per replica
  instanceCount: 1

  # Client image
  # ref: https://github.com/Seagate/cortx/pkgs/container/cortx-data
  image:
    # -- Client image registry
    registry: ghcr.io
    # -- Client image name
    repository: seagate/cortx-data
    # -- Client image tag
    # @default -- Chart.AppVersion
    tag: ""
    # -- Client image pull policy
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    pullPolicy: IfNotPresent
