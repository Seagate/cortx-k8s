{{- if .Values.client.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cortx.client.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "cortx.labels" . | nindent 4 }}
    app.kubernetes.io/component: client
spec:
  podManagementPolicy: Parallel
  serviceName: {{ include "cortx.client.fullname" . }}-headless
  replicas: {{ .Values.client.replicaCount }}
  selector:
    matchLabels: {{- include "cortx.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: client
      cortx.io/hax-enabled: "true"
      cortx.io/service-domain: {{ include "cortx.client.serviceDomain" . }}
      cortx.io/service-type: cortx-client
  template:
    metadata:
      labels: {{- include "cortx.labels" . | nindent 8 }}
        app.kubernetes.io/component: client
        cortx.io/hax-enabled: "true"
        cortx.io/service-domain: {{ include "cortx.client.serviceDomain" . }}
        cortx.io/service-type: cortx-client
    spec:
      subdomain: {{ include "cortx.client.fullname" . }}-headless
      serviceAccountName: {{ include "cortx.serviceAccountName" . }}
      volumes:
        - name: cortx-configuration
          configMap:
            name: {{ include "cortx.configmapName" . }}
        - name: cortx-ssl-cert
          secret:
            secretName: {{ include "cortx.tls.secretName" . }}
        - name: configuration-secrets
          secret:
            secretName: {{ include "cortx.secretName" . }}
        - name: data
          emptyDir: {}
      {{- $logFiles := list }}
      {{- $logDetails := include "cortx.setupLoggingDetail" ( dict "component" .Values.client "root" .) }}
      {{- if has $logDetails (list "component" "all") }}
        {{- $logFiles = list
              "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/hare_deployment/setup.log"
              "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/setup.log"
              "/etc/cortx/log/motr/$TAIL_MACHINE_ID/mini_provisioner"
              "/etc/cortx/log/utils/$TAIL_MACHINE_ID/utils_setup.log" }}
        {{- if (eq $logDetails "all") }}
          {{- $logFiles = concat $logFiles (list
                "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/consul-elect-rc-leader.log"
                "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/consul-watch-handler.log"
                "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/hare-consul.log"
                "/etc/cortx/log/hare/log/$TAIL_MACHINE_ID/hare-hax.log") }}
        {{- end }}
      {{- end }}
      {{- $imageContext := dict "image" .Values.client.image "logFiles" $logFiles "root" . }}
      initContainers:
        {{- include "cortx.containers.setup" $imageContext | nindent 8 }}
      containers:
        {{- include "cortx.containers.hax" $imageContext | nindent 8 }}
        {{- $image := include "cortx.client.image" . }}
        {{- range $i := until (.Values.client.instanceCount | int) }}
        - name: {{ printf "cortx-motr-client-%03d" (add 1 $i) }}
          image: {{ $image }}
          imagePullPolicy: {{ include "cortx.images.imagePullPolicy" $imageContext }}
          {{- if eq $image "ghcr.io/seagate/centos:7" }}
          command: ["/bin/sleep", "3650d"]
          {{- else }}
          command:
            - /bin/sh
          args:
            - -c
            - /opt/seagate/cortx/motr/bin/motr_setup start --services client --idx $CLIENT_INDEX --config $CORTX_CONFSTORE_URL
          {{- end }}
          volumeMounts:
            - name: cortx-configuration
              mountPath: /etc/cortx/solution
            - name: cortx-ssl-cert
              mountPath: /etc/cortx/solution/ssl
            - name: data
              mountPath: /etc/cortx
          env:
            - name: CLIENT_INDEX
              value: {{ printf "%d" (add 1 $i) | quote }}
            - name: CORTX_CONFSTORE_URL
              value: {{ include "cortx.confstore.url" $ }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          securityContext:
            allowPrivilegeEscalation: false
        {{- end }}
{{- end }}
